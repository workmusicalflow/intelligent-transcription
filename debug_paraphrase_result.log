Array
(
    [success] => 1
    [original_text] => Devons-nous faire un grand sourire ou... Non, un grand sourire, c'est creusant. C'est ce que je pensais. Je suis Boris, je suis ingénieur. Je suis Kat, je suis manager de produits. Nous aimons voir ce que les gens construisent avec Quad, en particulier avec le codage, et nous voulons faire Quad mieux à coder pour tout le monde. Nous avons construit des outils, l'un d'entre eux que nous partageons aujourd'hui. Nous lancons Quad Code comme prévue de recherche. Quad Code est un outil de codage agentique qui vous permet de travailler directement avec Quad dans votre terminal. Nous allons vous montrer un exemple d'action. Donc, nous avons un projet ici. C'est une application de Next.js. Ouvrons-la dans une instance de Quad Code. Maintenant que nous avons fait cela, Quad Code a accès à tous les fichiers dans ce répositoire. Nous ne savons pas grand-chose sur cette base de code. Cela ressemble à une application pour discuter avec un agent de soutien client. Prenons Quad pour qu'il nous explique cette base de code. Quad commence par lire les fichiers de haut niveau. Ensuite, il s'intègre plus profondément. Maintenant, il traverse tous les composants dans le projet. Cool. Voici son analyse finale. Disons que je suis demandé de remplacer cette barre gauche avec une histoire de chat. Je vais aussi ajouter un nouveau bouton de chat. Je vais demander à Quad de m'aider. Nous n'avons pas spécifié de fichiers ou de paths. Quad a déjà trouvé les bonnes fichiers pour s'ajuster. Quad peut aussi montrer son pensée. Nous pouvons voir comment il a décidé de résoudre ce problème. Quad me demande s'il veut accepter ces changements. Je lui réponds oui. Maintenant, Quad va s'ajuster à la barre gauche en ajoutant un bouton et des icônes. Ensuite, il s'ajuste à la logique pour s'assurer qu'il fonctionne correctement. Après un moment, Quad termine la tâche. Voici un résumé de ce qu'il a fait. Regardons l'application. Nous voyons un nouveau bouton de chat et une nouvelle section d'histoire de chat à gauche. Voyons si je peux démarrer un nouveau chat en gardant celui précédent. Je vais essayer le nouveau bouton de chat. C'est parfait. Tout fonctionne. Maintenant, demandons à Quad d'ajouter des tests pour s'assurer que les fonctionnalités que nous avons juste ajoutées fonctionnent. Quad me demande s'il peut utiliser les commandes. Je lui réponds oui. Quad fait des changements pour réaliser ces tests. Après avoir obtenu les résultats, il continue avec son plan jusqu'à ce que tous les tests passent. Après quelques minutes, on dirait que nous sommes prêts. Maintenant, je vais demander à Quad de compiler l'application et de voir si nous obtenons des erreurs. Voyons ce qu'il trouve. Quad a identifié les erreurs et les fixe maintenant. Ensuite, il essaie de construire de nouveau. Il continue jusqu'à ce qu'il fonctionne. Maintenant, finissons tout en demandant à Quad de commettre ses changements et de les pousser à GitHub. Quad crée un résumé et une description de nos changements. Et il va pousser les changements à GitHub. C'est tout. C'est un exemple de ce que Quad Code peut faire. On ne peut pas attendre que les gens commencent à le construire.
    [paraphrased_text] => Devons-nous afficher un large sourire ou... Non, un large sourire est exigeant. C'est bien ce que je pensais. Je suis Boris, ingénieur. Et moi, je suis Kat, responsable de produits. Nous aimons observer les créations des utilisateurs avec Quad, notamment en matière de codage, et nous aspirons à améliorer Quad pour faciliter le codage pour tous. Nous avons développé divers outils, dont l'un que nous partageons aujourd'hui. Nous dévoilons Quad Code en tant qu'outil de recherche. Quad Code est un outil de codage autonome qui vous permet de collaborer directement avec Quad dans votre terminal. Laissez-nous vous présenter un exemple pratique. Nous avons ici un projet, une application Next.js. Ouvrons-la avec Quad Code. Quad Code a désormais accès à tous les fichiers de ce dépôt. Nous n'avons pas une connaissance approfondie de ce code source. Il semble s'agir d'une application pour converser avec un agent du service client. Utilisons Quad pour une analyse de cette base de code. Quad commence par examiner les fichiers principaux, puis il approfondit son examen. Il passe en revue tous les composants du projet. Super. Voici son analyse finale. Disons que je dois remplacer la barre latérale par une vue d'historique de chat. Je souhaite également ajouter un nouveau bouton de chat. Je vais demander à Quad de m'assister. Sans préciser de fichiers ou de chemins, Quad localise tout seul les fichiers pertinents. Quad décrit aussi son raisonnement. Nous pouvons voir comment il résout ce problème. Quad me demande s'il doit appliquer ces changements. Je réponds par l'affirmative. Quad modifie alors la barre latérale en y ajoutant un bouton et des icônes, et ajuste la logique pour garantir un bon fonctionnement. Après un certain temps, Quad achève la tâche. Voici un résumé de ce qu'il a réalisé. Observons l'application. Nous constatons un nouveau bouton de chat et une nouvelle section d'historique sur la gauche. Voyons si je peux ouvrir un nouveau chat tout en conservant l'ancien. Essayons le nouveau bouton de chat. Parfait, tout fonctionne. Maintenant, demandons à Quad d'ajouter des tests pour vérifier la fonctionnalité des nouveautés. Quad me demande confirmation pour les utiliser. Je confirme. Quad effectue les modifications nécessaires pour réaliser ces tests. Après avoir obtenu les résultats, il poursuit son plan jusqu'à la réussite de tous les tests. Après quelques minutes, il semble que nous soyons prêts. Je vais maintenant demander à Quad de compiler l'application pour vérifier l'absence d'erreurs. Examinons ses trouvailles. Quad identifie les erreurs et procède à leur correction, puis tente à nouveau la compilation jusqu'à succès. Pour conclure, nous demandons à Quad de valider ses modifications et de les pousser sur GitHub. Quad crée un résumé et une description des changements effectués, puis les pousse sur GitHub. Voilà pour l'exemple de ce que Quad Code peut réaliser. Nous sommes impatients de voir ce que les utilisateurs vont construire.
    [language] => fr
)
