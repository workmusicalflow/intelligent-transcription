{% extends "base/layout.twig" %}

{% block title %}Résultat de la transcription | {{ app_name }}{% endblock %}

{% block stylesheets %}
<style>
    .transcript-container {
        @apply bg-white rounded-xl shadow-sm p-6 mb-6 max-w-4xl mx-auto;
    }
    
    .transcript-header {
        @apply border-b border-gray-200 pb-4 mb-4;
    }
    
    .transcript-meta {
        @apply grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6 text-sm;
    }
    
    .meta-item {
        @apply flex flex-col p-3 bg-gray-50 rounded-lg;
    }
    
    .meta-label {
        @apply text-gray-500 text-xs uppercase font-medium;
    }
    
    .meta-value {
        @apply text-gray-800 font-medium mt-1;
    }
    
    .transcript-text {
        @apply prose prose-gray max-w-none;
    }
    
    .transcript-text p {
        @apply mb-4;
    }
    
    .action-buttons {
        @apply flex flex-wrap gap-3 mt-6 border-t border-gray-200 pt-4;
    }
    
    .btn-secondary-outline {
        @apply inline-flex items-center px-4 py-2 border border-gray-300 
               shadow-sm text-sm font-medium rounded-md text-gray-700 
               bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 
               focus:ring-offset-2 focus:ring-indigo-500;
    }

    /* Styles pour le lecteur */
    .player-container {
        @apply mb-6 bg-gray-100 rounded-lg p-4;
    }
    
    .player-controls {
        @apply flex items-center gap-3 mb-3;
    }
    
    .player-progress {
        @apply w-full bg-gray-300 rounded-full h-2 overflow-hidden;
    }
    
    .player-progress-bar {
        @apply bg-primary h-full transition-all duration-300;
    }
    
    .player-time {
        @apply text-sm text-gray-600 flex justify-between mt-1;
    }
    
    /* Styles pour l'affichage des segments */
    .segments-container {
        @apply mt-8 border-t border-gray-200 pt-6;
    }
    
    .segment {
        @apply p-3 border-b border-gray-100 hover:bg-blue-50 transition-colors cursor-pointer rounded;
    }
    
    .segment.active {
        @apply bg-blue-50 border-blue-200;
    }
    
    .segment-time {
        @apply text-xs text-gray-500 mb-1;
    }
    
    .segment-text {
        @apply text-gray-800;
    }
</style>
{% endblock %}

{% block content %}
<div class="transcript-container">
    <div class="transcript-header">
        <h1 class="text-2xl font-bold mb-2">{{ result.title }}</h1>
        
        {% if result.youtube_url is defined and result.youtube_url %}
            <p class="text-gray-500 mb-2">
                Source: <a href="{{ result.youtube_url }}" target="_blank" class="text-primary hover:underline">
                    {{ result.youtube_url }}
                </a>
            </p>
        {% endif %}
    </div>
    
    <div class="transcript-meta">
        <div class="meta-item">
            <span class="meta-label">Langue</span>
            <span class="meta-value">
                {% if result.language == 'auto' %}
                    Détection automatique
                {% elseif result.language == 'fr' %}
                    Français
                {% elseif result.language == 'en' %}
                    Anglais
                {% elseif result.language == 'es' %}
                    Espagnol
                {% elseif result.language == 'de' %}
                    Allemand
                {% elseif result.language == 'it' %}
                    Italien
                {% else %}
                    {{ result.language }}
                {% endif %}
            </span>
        </div>
        
        <div class="meta-item">
            <span class="meta-label">Durée</span>
            <span class="meta-value">
                {% set hours = (result.duration / 3600)|floor %}
                {% set minutes = ((result.duration % 3600) / 60)|floor %}
                {% set seconds = (result.duration % 60)|floor %}
                
                {% if hours > 0 %}
                    {{ hours }}h {{ minutes }}m {{ seconds }}s
                {% elseif minutes > 0 %}
                    {{ minutes }}m {{ seconds }}s
                {% else %}
                    {{ seconds }}s
                {% endif %}
            </span>
        </div>
        
        <div class="meta-item">
            <span class="meta-label">Date</span>
            <span class="meta-value">
                {{ result.created_at|date("d/m/Y H:i") }}
            </span>
        </div>
        
        <div class="meta-item">
            <span class="meta-label">ID</span>
            <span class="meta-value text-xs font-mono">
                {{ result.id }}
            </span>
        </div>
    </div>
    
    {% if result.segments is defined and result.segments|length > 0 %}
        <div class="player-container">
            <div class="player-controls">
                <button id="play-button" class="btn-secondary-outline">
                    <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    Lecture
                </button>
            </div>
            
            <div class="player-progress">
                <div id="progress-bar" class="player-progress-bar" style="width: 0%"></div>
            </div>
            
            <div class="player-time">
                <span id="current-time">00:00</span>
                <span id="total-time">
                    {% set duration = result.duration|default(0) %}
                    {% set mins = (duration / 60)|floor %}
                    {% set secs = (duration % 60)|floor %}
                    {{ "%02d"|format(mins) }}:{{ "%02d"|format(secs) }}
                </span>
            </div>
        </div>
    {% endif %}
    
    <div class="transcript-text">
        {{ result.text|nl2br }}
    </div>
    
    {% if result.segments is defined and result.segments|length > 0 %}
        <div class="segments-container">
            <h2 class="text-lg font-medium mb-4">Segments</h2>
            
            <div class="segments-list">
                {% for segment in result.segments %}
                    <div class="segment" data-start="{{ segment.start }}" data-end="{{ segment.end }}">
                        <div class="segment-time">
                            {% set start_mins = (segment.start / 60)|floor %}
                            {% set start_secs = (segment.start % 60)|floor %}
                            {% set end_mins = (segment.end / 60)|floor %}
                            {% set end_secs = (segment.end % 60)|floor %}
                            
                            {{ "%02d"|format(start_mins) }}:{{ "%02d"|format(start_secs) }} - 
                            {{ "%02d"|format(end_mins) }}:{{ "%02d"|format(end_secs) }}
                        </div>
                        <div class="segment-text">{{ segment.text }}</div>
                    </div>
                {% endfor %}
            </div>
        </div>
    {% endif %}
    
    <div class="action-buttons">
        <a href="{{ url('index.php', {'action': 'download', 'id': result_id, 'format': 'txt'}) }}" class="btn-secondary-outline">
            <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path>
            </svg>
            Télécharger TXT
        </a>
        
        <a href="{{ url('index.php', {'action': 'download', 'id': result_id, 'format': 'json'}) }}" class="btn-secondary-outline">
            <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path>
            </svg>
            Télécharger JSON
        </a>
        
        {% if result.segments is defined and result.segments|length > 0 %}
            <a href="{{ url('index.php', {'action': 'download', 'id': result_id, 'format': 'srt'}) }}" class="btn-secondary-outline">
                <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path>
                </svg>
                Télécharger SRT
            </a>
            
            <a href="{{ url('index.php', {'action': 'download', 'id': result_id, 'format': 'vtt'}) }}" class="btn-secondary-outline">
                <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path>
                </svg>
                Télécharger VTT
            </a>
        {% endif %}
        
        <a href="{{ url('index.php', {'action': 'chat', 'source': result_id}) }}" class="btn-primary">
            <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"></path>
            </svg>
            Chat avec IA
        </a>
    </div>
</div>
{% endblock %}

{% block javascripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Simulation d'un lecteur audio (en production, utiliser l'API Audio)
        const playButton = document.getElementById('play-button');
        const progressBar = document.getElementById('progress-bar');
        const currentTimeEl = document.getElementById('current-time');
        const segments = document.querySelectorAll('.segment');
        
        let isPlaying = false;
        let duration = {{ result.duration|default(0) }};
        let currentTime = 0;
        let playerInterval;
        
        // Fonction pour formater le temps en MM:SS
        function formatTime(seconds) {
            const mins = Math.floor(seconds / 60);
            const secs = Math.floor(seconds % 60);
            return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
        }
        
        // Fonction pour mettre à jour l'affichage du temps
        function updateTimeDisplay() {
            currentTimeEl.textContent = formatTime(currentTime);
            progressBar.style.width = `${(currentTime / duration) * 100}%`;
            
            // Mettre en surbrillance le segment actuel
            segments.forEach(segment => {
                const start = parseFloat(segment.dataset.start);
                const end = parseFloat(segment.dataset.end);
                
                if (currentTime >= start && currentTime <= end) {
                    segment.classList.add('active');
                    
                    // Faire défiler jusqu'au segment actif
                    if (isPlaying) {
                        segment.scrollIntoView({behavior: 'smooth', block: 'center'});
                    }
                } else {
                    segment.classList.remove('active');
                }
            });
        }
        
        // Gestion du bouton de lecture
        playButton.addEventListener('click', function() {
            if (isPlaying) {
                // Arrêter la lecture
                clearInterval(playerInterval);
                playButton.innerHTML = '<svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg> Lecture';
                isPlaying = false;
            } else {
                // Démarrer la lecture
                playerInterval = setInterval(function() {
                    currentTime += 0.1;
                    if (currentTime >= duration) {
                        currentTime = 0;
                        clearInterval(playerInterval);
                        isPlaying = false;
                        playButton.innerHTML = '<svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg> Lecture';
                    }
                    updateTimeDisplay();
                }, 100);
                
                playButton.innerHTML = '<svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg> Pause';
                isPlaying = true;
            }
        });
        
        // Clic sur un segment pour naviguer
        segments.forEach(segment => {
            segment.addEventListener('click', function() {
                currentTime = parseFloat(this.dataset.start);
                updateTimeDisplay();
                
                // Si pas en lecture, mettre toutes les classes active à jour
                if (!isPlaying) {
                    segments.forEach(s => s.classList.remove('active'));
                    this.classList.add('active');
                }
            });
        });
        
        // Initialiser l'affichage
        updateTimeDisplay();
    });
</script>
{% endblock %}
